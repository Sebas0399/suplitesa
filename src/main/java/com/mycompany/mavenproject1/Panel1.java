/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.mavenproject1;

import java.awt.Color;
import java.util.List;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author sebas
 */
public class Panel1 extends javax.swing.JPanel {

    //var pathInsumos;
   private Map<String,String> paths;
    //var pathListadoFacturas;

    /**
     * Creates new form Panel1
     */
    public Panel1() {
        initComponents();
        this.setBounds(0, 0, 600, 800);
        this.setBackground(Color.gray);
        paths=new HashMap<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cargarListadoVentas = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cargarReporteProduccion = new javax.swing.JButton();
        cargarInsumos = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        cargarListadoVentas.setText("Cargar");
        cargarListadoVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarListadoVentasActionPerformed(evt);
            }
        });

        jLabel1.setText("Listado Ventas");

        jLabel2.setText("Reporte de producci√≥n");

        cargarReporteProduccion.setText("Cargar");
        cargarReporteProduccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarReporteProduccionActionPerformed(evt);
            }
        });

        cargarInsumos.setText("Cargar");
        cargarInsumos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarInsumosActionPerformed(evt);
            }
        });

        jLabel3.setText("Insumos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cargarInsumos)
                    .addComponent(cargarListadoVentas)
                    .addComponent(cargarReporteProduccion))
                .addGap(160, 160, 160))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cargarListadoVentas)
                    .addComponent(jLabel1))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(cargarReporteProduccion))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cargarInsumos)
                    .addComponent(jLabel3))
                .addContainerGap(159, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cargarListadoVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarListadoVentasActionPerformed
        // TODO add your handling code here:
        var j = new JFileChooser(FileSystemView.getFileSystemView());

// Open the save dialog
        int r = j.showOpenDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            var fileLocation = j.getSelectedFile().getAbsolutePath();

            try {
                FileInputStream file = new FileInputStream(new File(fileLocation));
                Workbook workbook = new XSSFWorkbook(file);
                int numHojas = workbook.getNumberOfSheets();
                for (int i = 0; i <= numHojas; i++) {

                }
                Sheet sheet = workbook.getSheetAt(0);

                Map<Integer, List<String>> data = new HashMap<>();
                int i = 0;
                for (Row row : sheet) {
                    data.put(i, new ArrayList<String>());
                    for (Cell cell : row) {
                        switch (cell.getCellType()) {
                            case STRING:
                                data.get(new Integer(i)).add(cell.getRichStringCellValue().getString());
                                break;
                            case NUMERIC:
                                if (DateUtil.isCellDateFormatted(cell)) {
                                    data.get(i).add(cell.getDateCellValue() + "");
                                } else {
                                    data.get(i).add(cell.getNumericCellValue() + "");
                                }
                                break;
                            case BOOLEAN:
                                data.get(i).add(cell.getBooleanCellValue() + "");
                                break;
                            case FORMULA:
                                data.get(i).add(cell.getCellFormula() + "");
                                break;
                            default:
                                data.get(new Integer(i)).add(" ");
                        }
                    }
                    i++;
                }
                System.out.println(data);
            } catch (Exception ex) {
                Logger.getLogger(Panel1.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_cargarListadoVentasActionPerformed

    private void cargarReporteProduccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarReporteProduccionActionPerformed
        // TODO add your handling code here:
        var path = cargarData();
        if (path != null) {
            try {
                FileInputStream file = new FileInputStream(new File(path));
                JOptionPane.showConfirmDialog(null, "Reporte de produccion cargado correctamente");
                
                getPaths().put("RP",path);

            } catch (FileNotFoundException ex) {
                JOptionPane.showConfirmDialog(null, "Ocurrio un error");
                Logger.getLogger(Panel1.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showConfirmDialog(null, "Ocurrio un error");
        }

    }//GEN-LAST:event_cargarReporteProduccionActionPerformed

    private void cargarInsumosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarInsumosActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cargarInsumosActionPerformed
    public String cargarData() {
        var j = new JFileChooser(FileSystemView.getFileSystemView());
        int r = j.showOpenDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            return j.getSelectedFile().getAbsolutePath();

        } else {
            return null;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cargarInsumos;
    private javax.swing.JButton cargarListadoVentas;
    private javax.swing.JButton cargarReporteProduccion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the paths
     */
    public Map<String,String> getPaths() {
        return paths;
    }

    /**
     * @param paths the paths to set
     */
    public void setPaths(Map<String,String> paths) {
        this.paths = paths;
    }

   
}
