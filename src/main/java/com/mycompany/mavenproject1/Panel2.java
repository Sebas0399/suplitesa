/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.mavenproject1;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import static org.apache.poi.ss.usermodel.CellType.BOOLEAN;
import static org.apache.poi.ss.usermodel.CellType.FORMULA;
import static org.apache.poi.ss.usermodel.CellType.NUMERIC;
import static org.apache.poi.ss.usermodel.CellType.STRING;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author sebas
 */
public class Panel2 extends javax.swing.JPanel {

    /**
     * Creates new form Panel2
     *
     * @param path
     */
    private Map<String, String> paths;

    public Panel2(Map<String, String> path) {
        initComponents();
        this.setBounds(0, 0, 600, 800);
        this.setBackground(Color.gray);
        this.paths = path;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        generarFacturas = new javax.swing.JToggleButton();

        jLabel2.setText("Generar Facturas");

        generarFacturas.setText("Generar");
        generarFacturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarFacturasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(generarFacturas)))
                .addContainerGap(210, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generarFacturas)
                .addContainerGap(226, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void generarFacturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarFacturasActionPerformed
        // TODO add your handling code here:
        try {
            List<Map<Integer, List<String>>> archivoGeneral = new ArrayList<>();
            FileInputStream file = new FileInputStream(new File(this.paths.get("RP")));
            Workbook workbook = new XSSFWorkbook(file);
            int numHojas = workbook.getNumberOfSheets();

            for (int i = 0; i <= numHojas - 1; i++) {
                Sheet sheet = workbook.getSheetAt(i);

                Map<Integer, List<String>> data = new HashMap<>();
                int j = 0;
                for (Row row : sheet) {
                    data.put(j, new ArrayList<String>());
                    for (Cell cell : row) {
                        switch (cell.getCellType()) {
                            case STRING:
                                data.get(new Integer(j)).add(cell.getRichStringCellValue().getString());
                                break;
                            case NUMERIC:
                                if (DateUtil.isCellDateFormatted(cell)) {
                                    data.get(j).add(cell.getDateCellValue() + "");
                                } else {
                                    data.get(j).add(cell.getNumericCellValue() + "");
                                }
                                break;
                            case BOOLEAN:
                                data.get(j).add(cell.getBooleanCellValue() + "");
                                break;
                            case FORMULA:
                                data.get(j).add(cell.getCellFormula() + "");
                                break;
                            default:
                                data.get(new Integer(j)).add(" ");
                        }

                    }

                    j++;

                }
                archivoGeneral.add(data);

            }
            generarFacturaExcel(archivoGeneral);
        } catch (Exception ex) {
            JOptionPane.showConfirmDialog(null, "Cargue el reporte de produccion");
            Logger.getLogger(Panel1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_generarFacturasActionPerformed

    private List<Map<Integer, List<String>>> getFacturasPorRuc(String ruc, List<Map<Integer, List<String>>> archivoGeneral) {
        List<Map<Integer, List<String>>> res = new ArrayList<>();
        for (var factura : archivoGeneral) {
            var r = factura.get(2).get(0).split("-");

            if (r[r.length - 1].trim().equals(ruc.trim())) {

                res.add(factura);
            }
        }
        System.out.println("Resultado");
        System.out.println(res.size());
        return res;
    }

    public List<String> extraerNumeros(String input) {
        List<String> numeros = new ArrayList<>();
        Pattern pattern = Pattern.compile("\\d{13}");
        Matcher matcher = pattern.matcher(input);

        while (matcher.find()) {
            numeros.add(matcher.group());
        }

        return numeros;
    }

    public List<String> obtenerRucs(List<String> rucs) {
        List<String> numeros = new ArrayList<>();
        for (var input : rucs) {
            Pattern pattern = Pattern.compile("\\d{13}");
            Matcher matcher = pattern.matcher(input);

            while (matcher.find()) {
                numeros.add(matcher.group());
            }
        }

        return numeros;
    }

    private void generarFacturaExcel(List<Map<Integer, List<String>>> archivoGeneral) {
        var listadoRUC = archivoGeneral.stream().map(x -> (x.get(2).get(0))).distinct().toList();
        var listRuc = obtenerRucs(listadoRUC);

        listRuc.stream().forEach(x -> System.out.println(getFacturasPorRuc(x, archivoGeneral)));
        List<String> cabecera = List.of("Subpartida", "Complementario", "Suplementario", "Numero de factura", "Numero de item");
        List<String> cabecera2 = List.of("prdt_hs_part_cd", "prdt_hs_cpmt_cd", "prdt_hs_spmt_cd", "ntfc_no", "ntfc_de");
        //listadoRUC.stream().forEach(cnsmr);
        Workbook workbook = new XSSFWorkbook();

        Sheet sheet = workbook.createSheet();
        Row header = sheet.createRow(0);
        for (int i = 0; i <= cabecera.size() - 1; i++) {
            header.createCell(i).setCellValue(cabecera.get(i));

        }
        Row header2 = sheet.createRow(1);
        for (int i = 0; i <= cabecera2.size() - 1; i++) {
            header2.createCell(i).setCellValue(cabecera2.get(i));
        }

        File currDir = new File(".");
        String path = currDir.getAbsolutePath();
        String fileLocation = path.substring(0, path.length() - 1) + "temp.xlsx";

        FileOutputStream outputStream;
        try {
            outputStream = new FileOutputStream(fileLocation);
            try {
                workbook.write(outputStream);
            } catch (IOException ex) {
                Logger.getLogger(Panel2.class.getName()).log(Level.SEVERE, null, ex);
            }
            workbook.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Panel2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Panel2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton generarFacturas;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
